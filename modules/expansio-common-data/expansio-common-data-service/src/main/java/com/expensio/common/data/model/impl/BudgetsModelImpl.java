/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.expensio.common.data.model.impl;

import com.expensio.common.data.model.Budgets;
import com.expensio.common.data.model.BudgetsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Budgets service. Represents a row in the &quot;expensio_Budgets&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BudgetsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BudgetsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BudgetsImpl
 * @generated
 */
@JSON(strict = true)
public class BudgetsModelImpl
	extends BaseModelImpl<Budgets> implements BudgetsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a budgets model instance should use the <code>Budgets</code> interface instead.
	 */
	public static final String TABLE_NAME = "expensio_Budgets";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"budgetId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"budgetAmount", Types.BIGINT},
		{"budgetDuration", Types.TIMESTAMP},
		{"budgetDescription", Types.VARCHAR},
		{"budgetDepartmentId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("budgetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("budgetAmount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("budgetDuration", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("budgetDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("budgetDepartmentId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table expensio_Budgets (uuid_ VARCHAR(75) null,budgetId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,budgetAmount LONG,budgetDuration DATE null,budgetDescription VARCHAR(75) null,budgetDepartmentId LONG)";

	public static final String TABLE_SQL_DROP = "drop table expensio_Budgets";

	public static final String ORDER_BY_JPQL = " ORDER BY budgets.budgetId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY expensio_Budgets.budgetId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUDGETID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BudgetsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _budgetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBudgetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _budgetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Budgets.class;
	}

	@Override
	public String getModelClassName() {
		return Budgets.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Budgets, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Budgets, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Budgets, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Budgets)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Budgets, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Budgets, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Budgets)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Budgets, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Budgets, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Budgets, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Budgets, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Budgets, Object>>();

			attributeGetterFunctions.put("uuid", Budgets::getUuid);
			attributeGetterFunctions.put("budgetId", Budgets::getBudgetId);
			attributeGetterFunctions.put("companyId", Budgets::getCompanyId);
			attributeGetterFunctions.put("userId", Budgets::getUserId);
			attributeGetterFunctions.put("userName", Budgets::getUserName);
			attributeGetterFunctions.put("createDate", Budgets::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Budgets::getModifiedDate);
			attributeGetterFunctions.put(
				"budgetAmount", Budgets::getBudgetAmount);
			attributeGetterFunctions.put(
				"budgetDuration", Budgets::getBudgetDuration);
			attributeGetterFunctions.put(
				"budgetDescription", Budgets::getBudgetDescription);
			attributeGetterFunctions.put(
				"budgetDepartmentId", Budgets::getBudgetDepartmentId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Budgets, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Budgets, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Budgets, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Budgets, String>)Budgets::setUuid);
			attributeSetterBiConsumers.put(
				"budgetId", (BiConsumer<Budgets, Long>)Budgets::setBudgetId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Budgets, Long>)Budgets::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Budgets, Long>)Budgets::setUserId);
			attributeSetterBiConsumers.put(
				"userName", (BiConsumer<Budgets, String>)Budgets::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Budgets, Date>)Budgets::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Budgets, Date>)Budgets::setModifiedDate);
			attributeSetterBiConsumers.put(
				"budgetAmount",
				(BiConsumer<Budgets, Long>)Budgets::setBudgetAmount);
			attributeSetterBiConsumers.put(
				"budgetDuration",
				(BiConsumer<Budgets, Date>)Budgets::setBudgetDuration);
			attributeSetterBiConsumers.put(
				"budgetDescription",
				(BiConsumer<Budgets, String>)Budgets::setBudgetDescription);
			attributeSetterBiConsumers.put(
				"budgetDepartmentId",
				(BiConsumer<Budgets, Long>)Budgets::setBudgetDepartmentId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getBudgetId() {
		return _budgetId;
	}

	@Override
	public void setBudgetId(long budgetId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_budgetId = budgetId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Long getBudgetAmount() {
		return _budgetAmount;
	}

	@Override
	public void setBudgetAmount(Long budgetAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_budgetAmount = budgetAmount;
	}

	@JSON
	@Override
	public Date getBudgetDuration() {
		return _budgetDuration;
	}

	@Override
	public void setBudgetDuration(Date budgetDuration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_budgetDuration = budgetDuration;
	}

	@JSON
	@Override
	public String getBudgetDescription() {
		if (_budgetDescription == null) {
			return "";
		}
		else {
			return _budgetDescription;
		}
	}

	@Override
	public void setBudgetDescription(String budgetDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_budgetDescription = budgetDescription;
	}

	@JSON
	@Override
	public Long getBudgetDepartmentId() {
		return _budgetDepartmentId;
	}

	@Override
	public void setBudgetDepartmentId(Long budgetDepartmentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_budgetDepartmentId = budgetDepartmentId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Budgets.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Budgets.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Budgets toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Budgets>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BudgetsImpl budgetsImpl = new BudgetsImpl();

		budgetsImpl.setUuid(getUuid());
		budgetsImpl.setBudgetId(getBudgetId());
		budgetsImpl.setCompanyId(getCompanyId());
		budgetsImpl.setUserId(getUserId());
		budgetsImpl.setUserName(getUserName());
		budgetsImpl.setCreateDate(getCreateDate());
		budgetsImpl.setModifiedDate(getModifiedDate());
		budgetsImpl.setBudgetAmount(getBudgetAmount());
		budgetsImpl.setBudgetDuration(getBudgetDuration());
		budgetsImpl.setBudgetDescription(getBudgetDescription());
		budgetsImpl.setBudgetDepartmentId(getBudgetDepartmentId());

		budgetsImpl.resetOriginalValues();

		return budgetsImpl;
	}

	@Override
	public Budgets cloneWithOriginalValues() {
		BudgetsImpl budgetsImpl = new BudgetsImpl();

		budgetsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		budgetsImpl.setBudgetId(this.<Long>getColumnOriginalValue("budgetId"));
		budgetsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		budgetsImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		budgetsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		budgetsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		budgetsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		budgetsImpl.setBudgetAmount(
			this.<Long>getColumnOriginalValue("budgetAmount"));
		budgetsImpl.setBudgetDuration(
			this.<Date>getColumnOriginalValue("budgetDuration"));
		budgetsImpl.setBudgetDescription(
			this.<String>getColumnOriginalValue("budgetDescription"));
		budgetsImpl.setBudgetDepartmentId(
			this.<Long>getColumnOriginalValue("budgetDepartmentId"));

		return budgetsImpl;
	}

	@Override
	public int compareTo(Budgets budgets) {
		int value = 0;

		if (getBudgetId() < budgets.getBudgetId()) {
			value = -1;
		}
		else if (getBudgetId() > budgets.getBudgetId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Budgets)) {
			return false;
		}

		Budgets budgets = (Budgets)object;

		long primaryKey = budgets.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Budgets> toCacheModel() {
		BudgetsCacheModel budgetsCacheModel = new BudgetsCacheModel();

		budgetsCacheModel.uuid = getUuid();

		String uuid = budgetsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			budgetsCacheModel.uuid = null;
		}

		budgetsCacheModel.budgetId = getBudgetId();

		budgetsCacheModel.companyId = getCompanyId();

		budgetsCacheModel.userId = getUserId();

		budgetsCacheModel.userName = getUserName();

		String userName = budgetsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			budgetsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			budgetsCacheModel.createDate = createDate.getTime();
		}
		else {
			budgetsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			budgetsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			budgetsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Long budgetAmount = getBudgetAmount();

		if (budgetAmount != null) {
			budgetsCacheModel.budgetAmount = budgetAmount;
		}

		Date budgetDuration = getBudgetDuration();

		if (budgetDuration != null) {
			budgetsCacheModel.budgetDuration = budgetDuration.getTime();
		}
		else {
			budgetsCacheModel.budgetDuration = Long.MIN_VALUE;
		}

		budgetsCacheModel.budgetDescription = getBudgetDescription();

		String budgetDescription = budgetsCacheModel.budgetDescription;

		if ((budgetDescription != null) && (budgetDescription.length() == 0)) {
			budgetsCacheModel.budgetDescription = null;
		}

		Long budgetDepartmentId = getBudgetDepartmentId();

		if (budgetDepartmentId != null) {
			budgetsCacheModel.budgetDepartmentId = budgetDepartmentId;
		}

		return budgetsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Budgets, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Budgets, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Budgets, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Budgets)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Budgets>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Budgets.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _budgetId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Long _budgetAmount;
	private Date _budgetDuration;
	private String _budgetDescription;
	private Long _budgetDepartmentId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Budgets, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Budgets)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("budgetId", _budgetId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("budgetAmount", _budgetAmount);
		_columnOriginalValues.put("budgetDuration", _budgetDuration);
		_columnOriginalValues.put("budgetDescription", _budgetDescription);
		_columnOriginalValues.put("budgetDepartmentId", _budgetDepartmentId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("budgetId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("budgetAmount", 128L);

		columnBitmasks.put("budgetDuration", 256L);

		columnBitmasks.put("budgetDescription", 512L);

		columnBitmasks.put("budgetDepartmentId", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Budgets _escapedModel;

}