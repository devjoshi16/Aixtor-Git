/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.expensio.common.data.model.impl;

import com.expensio.common.data.model.Expenses;
import com.expensio.common.data.model.ExpensesModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Expenses service. Represents a row in the &quot;expensio_Expenses&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ExpensesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpensesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExpensesImpl
 * @generated
 */
@JSON(strict = true)
public class ExpensesModelImpl
	extends BaseModelImpl<Expenses> implements ExpensesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a expenses model instance should use the <code>Expenses</code> interface instead.
	 */
	public static final String TABLE_NAME = "expensio_Expenses";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"expenseId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"expenseAmount", Types.BIGINT},
		{"categoryId", Types.BIGINT}, {"subCategoryId", Types.BIGINT},
		{"employeeUserId", Types.BIGINT}, {"docMedia", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expenseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expenseAmount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("docMedia", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table expensio_Expenses (uuid_ VARCHAR(75) null,expenseId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,expenseAmount LONG,categoryId LONG,subCategoryId LONG,employeeUserId LONG,docMedia VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table expensio_Expenses";

	public static final String ORDER_BY_JPQL =
		" ORDER BY expenses.expenseId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY expensio_Expenses.expenseId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXPENSEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ExpensesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _expenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExpenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _expenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Expenses.class;
	}

	@Override
	public String getModelClassName() {
		return Expenses.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Expenses, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Expenses, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Expenses, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Expenses)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Expenses, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Expenses, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Expenses)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Expenses, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Expenses, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Expenses, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Expenses, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Expenses, Object>>();

			attributeGetterFunctions.put("uuid", Expenses::getUuid);
			attributeGetterFunctions.put("expenseId", Expenses::getExpenseId);
			attributeGetterFunctions.put("companyId", Expenses::getCompanyId);
			attributeGetterFunctions.put("userId", Expenses::getUserId);
			attributeGetterFunctions.put("userName", Expenses::getUserName);
			attributeGetterFunctions.put("createDate", Expenses::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Expenses::getModifiedDate);
			attributeGetterFunctions.put(
				"expenseAmount", Expenses::getExpenseAmount);
			attributeGetterFunctions.put("categoryId", Expenses::getCategoryId);
			attributeGetterFunctions.put(
				"subCategoryId", Expenses::getSubCategoryId);
			attributeGetterFunctions.put(
				"employeeUserId", Expenses::getEmployeeUserId);
			attributeGetterFunctions.put("docMedia", Expenses::getDocMedia);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Expenses, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Expenses, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Expenses, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Expenses, String>)Expenses::setUuid);
			attributeSetterBiConsumers.put(
				"expenseId",
				(BiConsumer<Expenses, Long>)Expenses::setExpenseId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Expenses, Long>)Expenses::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Expenses, Long>)Expenses::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Expenses, String>)Expenses::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Expenses, Date>)Expenses::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Expenses, Date>)Expenses::setModifiedDate);
			attributeSetterBiConsumers.put(
				"expenseAmount",
				(BiConsumer<Expenses, Long>)Expenses::setExpenseAmount);
			attributeSetterBiConsumers.put(
				"categoryId",
				(BiConsumer<Expenses, Long>)Expenses::setCategoryId);
			attributeSetterBiConsumers.put(
				"subCategoryId",
				(BiConsumer<Expenses, Long>)Expenses::setSubCategoryId);
			attributeSetterBiConsumers.put(
				"employeeUserId",
				(BiConsumer<Expenses, Long>)Expenses::setEmployeeUserId);
			attributeSetterBiConsumers.put(
				"docMedia",
				(BiConsumer<Expenses, String>)Expenses::setDocMedia);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getExpenseId() {
		return _expenseId;
	}

	@Override
	public void setExpenseId(long expenseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expenseId = expenseId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Long getExpenseAmount() {
		return _expenseAmount;
	}

	@Override
	public void setExpenseAmount(Long expenseAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expenseAmount = expenseAmount;
	}

	@JSON
	@Override
	public Long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(Long categoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryId = categoryId;
	}

	@JSON
	@Override
	public Long getSubCategoryId() {
		return _subCategoryId;
	}

	@Override
	public void setSubCategoryId(Long subCategoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subCategoryId = subCategoryId;
	}

	@JSON
	@Override
	public Long getEmployeeUserId() {
		return _employeeUserId;
	}

	@Override
	public void setEmployeeUserId(Long employeeUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeUserId = employeeUserId;
	}

	@JSON
	@Override
	public String getDocMedia() {
		if (_docMedia == null) {
			return "";
		}
		else {
			return _docMedia;
		}
	}

	@Override
	public void setDocMedia(String docMedia) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docMedia = docMedia;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Expenses.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Expenses.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Expenses toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Expenses>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExpensesImpl expensesImpl = new ExpensesImpl();

		expensesImpl.setUuid(getUuid());
		expensesImpl.setExpenseId(getExpenseId());
		expensesImpl.setCompanyId(getCompanyId());
		expensesImpl.setUserId(getUserId());
		expensesImpl.setUserName(getUserName());
		expensesImpl.setCreateDate(getCreateDate());
		expensesImpl.setModifiedDate(getModifiedDate());
		expensesImpl.setExpenseAmount(getExpenseAmount());
		expensesImpl.setCategoryId(getCategoryId());
		expensesImpl.setSubCategoryId(getSubCategoryId());
		expensesImpl.setEmployeeUserId(getEmployeeUserId());
		expensesImpl.setDocMedia(getDocMedia());

		expensesImpl.resetOriginalValues();

		return expensesImpl;
	}

	@Override
	public Expenses cloneWithOriginalValues() {
		ExpensesImpl expensesImpl = new ExpensesImpl();

		expensesImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		expensesImpl.setExpenseId(
			this.<Long>getColumnOriginalValue("expenseId"));
		expensesImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		expensesImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		expensesImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		expensesImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		expensesImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		expensesImpl.setExpenseAmount(
			this.<Long>getColumnOriginalValue("expenseAmount"));
		expensesImpl.setCategoryId(
			this.<Long>getColumnOriginalValue("categoryId"));
		expensesImpl.setSubCategoryId(
			this.<Long>getColumnOriginalValue("subCategoryId"));
		expensesImpl.setEmployeeUserId(
			this.<Long>getColumnOriginalValue("employeeUserId"));
		expensesImpl.setDocMedia(
			this.<String>getColumnOriginalValue("docMedia"));

		return expensesImpl;
	}

	@Override
	public int compareTo(Expenses expenses) {
		int value = 0;

		if (getExpenseId() < expenses.getExpenseId()) {
			value = -1;
		}
		else if (getExpenseId() > expenses.getExpenseId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Expenses)) {
			return false;
		}

		Expenses expenses = (Expenses)object;

		long primaryKey = expenses.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Expenses> toCacheModel() {
		ExpensesCacheModel expensesCacheModel = new ExpensesCacheModel();

		expensesCacheModel.uuid = getUuid();

		String uuid = expensesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			expensesCacheModel.uuid = null;
		}

		expensesCacheModel.expenseId = getExpenseId();

		expensesCacheModel.companyId = getCompanyId();

		expensesCacheModel.userId = getUserId();

		expensesCacheModel.userName = getUserName();

		String userName = expensesCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			expensesCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			expensesCacheModel.createDate = createDate.getTime();
		}
		else {
			expensesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			expensesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			expensesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Long expenseAmount = getExpenseAmount();

		if (expenseAmount != null) {
			expensesCacheModel.expenseAmount = expenseAmount;
		}

		Long categoryId = getCategoryId();

		if (categoryId != null) {
			expensesCacheModel.categoryId = categoryId;
		}

		Long subCategoryId = getSubCategoryId();

		if (subCategoryId != null) {
			expensesCacheModel.subCategoryId = subCategoryId;
		}

		Long employeeUserId = getEmployeeUserId();

		if (employeeUserId != null) {
			expensesCacheModel.employeeUserId = employeeUserId;
		}

		expensesCacheModel.docMedia = getDocMedia();

		String docMedia = expensesCacheModel.docMedia;

		if ((docMedia != null) && (docMedia.length() == 0)) {
			expensesCacheModel.docMedia = null;
		}

		return expensesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Expenses, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Expenses, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Expenses, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Expenses)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Expenses>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Expenses.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _expenseId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Long _expenseAmount;
	private Long _categoryId;
	private Long _subCategoryId;
	private Long _employeeUserId;
	private String _docMedia;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Expenses, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Expenses)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("expenseId", _expenseId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("expenseAmount", _expenseAmount);
		_columnOriginalValues.put("categoryId", _categoryId);
		_columnOriginalValues.put("subCategoryId", _subCategoryId);
		_columnOriginalValues.put("employeeUserId", _employeeUserId);
		_columnOriginalValues.put("docMedia", _docMedia);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("expenseId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("expenseAmount", 128L);

		columnBitmasks.put("categoryId", 256L);

		columnBitmasks.put("subCategoryId", 512L);

		columnBitmasks.put("employeeUserId", 1024L);

		columnBitmasks.put("docMedia", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Expenses _escapedModel;

}