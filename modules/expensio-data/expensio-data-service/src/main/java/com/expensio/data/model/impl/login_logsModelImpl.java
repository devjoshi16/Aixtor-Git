/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.expensio.data.model.impl;

import com.expensio.data.model.login_logs;
import com.expensio.data.model.login_logsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the login_logs service. Represents a row in the &quot;expensio_login_logs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>login_logsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link login_logsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see login_logsImpl
 * @generated
 */
@JSON(strict = true)
public class login_logsModelImpl
	extends BaseModelImpl<login_logs> implements login_logsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a login_logs model instance should use the <code>login_logs</code> interface instead.
	 */
	public static final String TABLE_NAME = "expensio_login_logs";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"loginLogId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"ipAddress", Types.VARCHAR}, {"uri", Types.VARCHAR},
		{"host", Types.VARCHAR}, {"loginDateTime", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loginLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uri", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("host", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loginDateTime", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table expensio_login_logs (uuid_ VARCHAR(75) null,loginLogId LONG not null primary key,userName VARCHAR(75) null,email VARCHAR(75) null,ipAddress VARCHAR(75) null,uri VARCHAR(75) null,host VARCHAR(75) null,loginDateTime DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table expensio_login_logs";

	public static final String ORDER_BY_JPQL =
		" ORDER BY login_logs.loginLogId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY expensio_login_logs.loginLogId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LOGINLOGID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public login_logsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _loginLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLoginLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _loginLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return login_logs.class;
	}

	@Override
	public String getModelClassName() {
		return login_logs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<login_logs, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<login_logs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<login_logs, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((login_logs)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<login_logs, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<login_logs, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(login_logs)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<login_logs, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<login_logs, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<login_logs, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<login_logs, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<login_logs, Object>>();

			attributeGetterFunctions.put("uuid", login_logs::getUuid);
			attributeGetterFunctions.put(
				"loginLogId", login_logs::getLoginLogId);
			attributeGetterFunctions.put("userName", login_logs::getUserName);
			attributeGetterFunctions.put("email", login_logs::getEmail);
			attributeGetterFunctions.put("ipAddress", login_logs::getIpAddress);
			attributeGetterFunctions.put("uri", login_logs::getUri);
			attributeGetterFunctions.put("host", login_logs::getHost);
			attributeGetterFunctions.put(
				"loginDateTime", login_logs::getLoginDateTime);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<login_logs, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<login_logs, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<login_logs, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<login_logs, String>)login_logs::setUuid);
			attributeSetterBiConsumers.put(
				"loginLogId",
				(BiConsumer<login_logs, Long>)login_logs::setLoginLogId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<login_logs, String>)login_logs::setUserName);
			attributeSetterBiConsumers.put(
				"email", (BiConsumer<login_logs, String>)login_logs::setEmail);
			attributeSetterBiConsumers.put(
				"ipAddress",
				(BiConsumer<login_logs, String>)login_logs::setIpAddress);
			attributeSetterBiConsumers.put(
				"uri", (BiConsumer<login_logs, String>)login_logs::setUri);
			attributeSetterBiConsumers.put(
				"host", (BiConsumer<login_logs, String>)login_logs::setHost);
			attributeSetterBiConsumers.put(
				"loginDateTime",
				(BiConsumer<login_logs, Date>)login_logs::setLoginDateTime);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getLoginLogId() {
		return _loginLogId;
	}

	@Override
	public void setLoginLogId(long loginLogId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loginLogId = loginLogId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return "";
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ipAddress = ipAddress;
	}

	@JSON
	@Override
	public String getUri() {
		if (_uri == null) {
			return "";
		}
		else {
			return _uri;
		}
	}

	@Override
	public void setUri(String uri) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uri = uri;
	}

	@JSON
	@Override
	public String getHost() {
		if (_host == null) {
			return "";
		}
		else {
			return _host;
		}
	}

	@Override
	public void setHost(String host) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_host = host;
	}

	@JSON
	@Override
	public Date getLoginDateTime() {
		return _loginDateTime;
	}

	@Override
	public void setLoginDateTime(Date loginDateTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loginDateTime = loginDateTime;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, login_logs.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public login_logs toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, login_logs>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		login_logsImpl login_logsImpl = new login_logsImpl();

		login_logsImpl.setUuid(getUuid());
		login_logsImpl.setLoginLogId(getLoginLogId());
		login_logsImpl.setUserName(getUserName());
		login_logsImpl.setEmail(getEmail());
		login_logsImpl.setIpAddress(getIpAddress());
		login_logsImpl.setUri(getUri());
		login_logsImpl.setHost(getHost());
		login_logsImpl.setLoginDateTime(getLoginDateTime());

		login_logsImpl.resetOriginalValues();

		return login_logsImpl;
	}

	@Override
	public login_logs cloneWithOriginalValues() {
		login_logsImpl login_logsImpl = new login_logsImpl();

		login_logsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		login_logsImpl.setLoginLogId(
			this.<Long>getColumnOriginalValue("loginLogId"));
		login_logsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		login_logsImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		login_logsImpl.setIpAddress(
			this.<String>getColumnOriginalValue("ipAddress"));
		login_logsImpl.setUri(this.<String>getColumnOriginalValue("uri"));
		login_logsImpl.setHost(this.<String>getColumnOriginalValue("host"));
		login_logsImpl.setLoginDateTime(
			this.<Date>getColumnOriginalValue("loginDateTime"));

		return login_logsImpl;
	}

	@Override
	public int compareTo(login_logs login_logs) {
		int value = 0;

		if (getLoginLogId() < login_logs.getLoginLogId()) {
			value = -1;
		}
		else if (getLoginLogId() > login_logs.getLoginLogId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof login_logs)) {
			return false;
		}

		login_logs login_logs = (login_logs)object;

		long primaryKey = login_logs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<login_logs> toCacheModel() {
		login_logsCacheModel login_logsCacheModel = new login_logsCacheModel();

		login_logsCacheModel.uuid = getUuid();

		String uuid = login_logsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			login_logsCacheModel.uuid = null;
		}

		login_logsCacheModel.loginLogId = getLoginLogId();

		login_logsCacheModel.userName = getUserName();

		String userName = login_logsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			login_logsCacheModel.userName = null;
		}

		login_logsCacheModel.email = getEmail();

		String email = login_logsCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			login_logsCacheModel.email = null;
		}

		login_logsCacheModel.ipAddress = getIpAddress();

		String ipAddress = login_logsCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			login_logsCacheModel.ipAddress = null;
		}

		login_logsCacheModel.uri = getUri();

		String uri = login_logsCacheModel.uri;

		if ((uri != null) && (uri.length() == 0)) {
			login_logsCacheModel.uri = null;
		}

		login_logsCacheModel.host = getHost();

		String host = login_logsCacheModel.host;

		if ((host != null) && (host.length() == 0)) {
			login_logsCacheModel.host = null;
		}

		Date loginDateTime = getLoginDateTime();

		if (loginDateTime != null) {
			login_logsCacheModel.loginDateTime = loginDateTime.getTime();
		}
		else {
			login_logsCacheModel.loginDateTime = Long.MIN_VALUE;
		}

		return login_logsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<login_logs, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<login_logs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<login_logs, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((login_logs)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, login_logs>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					login_logs.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _loginLogId;
	private String _userName;
	private String _email;
	private String _ipAddress;
	private String _uri;
	private String _host;
	private Date _loginDateTime;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<login_logs, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((login_logs)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("loginLogId", _loginLogId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("ipAddress", _ipAddress);
		_columnOriginalValues.put("uri", _uri);
		_columnOriginalValues.put("host", _host);
		_columnOriginalValues.put("loginDateTime", _loginDateTime);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("loginLogId", 2L);

		columnBitmasks.put("userName", 4L);

		columnBitmasks.put("email", 8L);

		columnBitmasks.put("ipAddress", 16L);

		columnBitmasks.put("uri", 32L);

		columnBitmasks.put("host", 64L);

		columnBitmasks.put("loginDateTime", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private login_logs _escapedModel;

}